@using OpticSalon.Domain.FilterData
@using OpticSalon.Domain.Models

<MudContainer Class="d-flex align-center justify-center mud-width-full" style="height:90vh;">
    <MudCard Class="p-4 w-100" Style="border-radius: 15px;"
             Outlined="false" Elevation="5">
        <MudCardHeader>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.Article" Size="Size.Large"
                         text-decoration Color="MudBlazor.Color.Secondary"></MudIcon>
                <MudText Typo="Typo.h5" Color="MudBlazor.Color.Secondary">
                    Рецепт
                </MudText>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="6" md="1">
                        <MudText Typo="Typo.h6" Style="font-weight: 600; text-decoration:underline; line-height: 3;" Color="MudBlazor.Color.Secondary">OD:</MudText>
                </MudItem>
                <MudItem xs="12" sm="8" md="4">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Style="font-weight: 400" Color="MudBlazor.Color.Secondary">Sph:</MudText>
                        <MudSelect T="double" @bind-Value="Recipe.RightEye.Sph" Variant="Variant.Outlined"
                                   ToStringFunc="((x) => GetNumber(x))">
                            @foreach (var value in RecipeDataFilter.GetSphRange(Recipe.Purpose?.Name))
                            {
                                <MudSelectItem Value="@(value)" />
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="8" md="4">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Style="font-weight: 400" Color="MudBlazor.Color.Secondary">Cyl:</MudText>
                        <MudSelect T="double" @bind-Value="Recipe.RightEye.Cyl" Variant="Variant.Outlined"
                                   ToStringFunc="((x) => GetNumber(x))">
                            @foreach (var value in RecipeDataFilter.GetCylRange())
                            {
                                <MudSelectItem Value="@(value)" />
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="8" md="3">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Style="font-weight: 400" Color="MudBlazor.Color.Secondary">Ax:</MudText>
                        <MudSelect T="int" @bind-Value="Recipe.RightEye.Axis" Variant="Variant.Outlined">
                            @foreach (var value in RecipeDataFilter.GetAxisRange())
                            {
                                <MudSelectItem Value="@(value)" />
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="6" md="1">
                    <MudText Typo="Typo.h6" Style="font-weight: 600; text-decoration:underline; line-height: 3;" Color="MudBlazor.Color.Secondary">OS:</MudText>
                </MudItem>
                <MudItem xs="12" sm="8" md="4">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Style="font-weight: 400" Color="MudBlazor.Color.Secondary">Sph:</MudText>
                        <MudSelect T="double" @bind-Value="Recipe.LeftEye.Sph" Variant="Variant.Outlined"
                                   ToStringFunc="((x) => GetNumber(x))">
                            @foreach (var value in RecipeDataFilter.GetSphRange(Recipe.Purpose?.Name))
                            {
                                <MudSelectItem Value="@(value)" />
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="8" md="4">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Style="font-weight: 400" Color="MudBlazor.Color.Secondary">Cyl:</MudText>
                        <MudSelect T="double" @bind-Value="Recipe.LeftEye.Cyl" Variant="Variant.Outlined"
                                   ToStringFunc="((x) => GetNumber(x))">
                            @foreach (var value in RecipeDataFilter.GetCylRange())
                            {
                                <MudSelectItem Value="@(value)" />
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="8" md="3">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Style="font-weight: 400" Color="MudBlazor.Color.Secondary">Ax:</MudText>
                        <MudSelect T="int" @bind-Value="Recipe.LeftEye.Axis" Variant="Variant.Outlined">
                            @foreach (var value in RecipeDataFilter.GetAxisRange())
                            {
                                <MudSelectItem Value="@(value)" />
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
                <MudItem xs="12">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Dp (mm):</MudText>
                        <MudSelect T="int" @bind-Value="Recipe.Dp" Variant="Variant.Outlined">
                            @foreach (var value in RecipeDataFilter.GetDpRange())
                            {
                                <MudSelectItem Value="@(value)" />
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public Recipe Recipe { get; set; } = new();

    private string GetNumber(double number)
    {
        if (number > 0)
        {
            return "+" + number.ToString("0.00");
        }
        else
        {
            return number.ToString("0.00");
        }
    }
}
