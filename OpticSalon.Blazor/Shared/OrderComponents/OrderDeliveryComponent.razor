@using OpticSalon.Auth.Models
@using OpticSalon.Blazor.Data.Credentials
@using OpticSalon.Blazor.Shared.Dialogs
@using OpticSalon.Domain.FilterData
@using OpticSalon.Domain.Models

@inject IClientService ClientService
@inject IDialogService DialogService

<MudContainer Class="mt-3">
    <EditForm  Model="@OrderCredentials" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <MudContainer Class="d-flex align-center justify-center mud-width-full">
        <MudCard Class="p-4 w-100" Style="border-radius: 15px;"
                 Outlined="false" Elevation="5">
            <MudCardHeader>
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.CardTravel" Size="Size.Large"
                             text-decoration Color="MudBlazor.Color.Secondary"></MudIcon>
                    <MudText Typo="Typo.h5" Color="MudBlazor.Color.Secondary">
                        Прочие данные
                    </MudText>
                </MudStack>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Spacing="2">
                    @if(!IsClient)
                    {
                        <MudItem xs="12">
                            <MudStack Row>
                                <MudAutocomplete T="Client" For="@(() => OrderCredentials.Client)" Label="Клиент" Value="@OrderCredentials.Client"
                                    SearchFunc="@SearchFilter" ValueChanged="@OnClientChanged" ToStringFunc="@_clientToStringFunc" Variant="Variant.Outlined" />
                                <MudFab OnClick="@ShowCreateClientDialog" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Add" ></MudFab>
                            </MudStack>
                        </MudItem>
                    }
                    <MudItem xs="12">
                        <MudTextField T="string" @bind-Value="OrderCredentials.ContactPhoneNumber"
                                    Label="Номер телефона" Variant="Variant.Outlined" 
                                    Mask="@(new PatternMask("+0 (000) 000 00-00"))"
                                      For="@(() => OrderCredentials.ContactPhoneNumber)"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" @bind-Value="OrderCredentials.Comment"
                                      Label="Комментарий" Lines="5" Variant="Variant.Outlined"
                                        For="@(() => OrderCredentials.Comment)"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                           <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Итоговая стоимость:</MudText>
                                <MudText Typo="Typo.h6" Style="font-weight: 400">@(GetTotalCost()) руб.</MudText>
                            </MudStack>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                @ChildContent
            </MudCardActions>
        </MudCard>
    </MudContainer>
</EditForm>
</MudContainer>

@code 
{
    [Parameter]
    public OrderCreateCredentials OrderCredentials { get; set; } = new();
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public Action OnValidSubmit { get; set; }
    [Parameter]
    public bool IsClient { get; set; }

    private Func<Client, string> _clientToStringFunc => x => x != null ? $"{x?.Surname} {x?.Name}, {x?.PhoneNumber}" : "";

    private decimal GetTotalCost()
    {
        return OrderCredentials.Frame.Cost + OrderCredentials.LensPackage.Cost;
    }

    private async Task<IEnumerable<Client>> SearchFilter(string value)
    {
        var res = await ClientService.GetAllClients();

        if (!res.Success)
        {
            return new List<Client>();
        }

        var clients = res.Data!;

        if (string.IsNullOrEmpty(value))
            return clients;
        return clients
            .Where(x => $"{x.Surname} {x.Name} {x.PhoneNumber}"
            .Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void OnClientChanged(Client client)
    {
        OrderCredentials.Client = client;

        OrderCredentials.ContactPhoneNumber = client.PhoneNumber;
    }

    private async Task ShowCreateClientDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsNew", true);

        var dialog = await DialogService.ShowAsync<EditClientDialog>("Добавление клиента", parameters);
    }
}
