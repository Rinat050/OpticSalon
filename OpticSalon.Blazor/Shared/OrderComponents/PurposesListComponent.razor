@using MudBlazor.Utilities
@using OpticSalon.Domain.Models


@if (_isLoading)
{
    <MudProgressLinear Color="MudBlazor.Color.Info" Indeterminate="true" Class="m-1" />
    return;
}

<MudContainer Class="d-flex align-center justify-center mud-width-full" style="height:90vh;">
    <MudCard Class="p-4 w-100" Style="border-radius: 15px;"
             Outlined="false" Elevation="5">
    <MudList Clickable="true">
        <MudListSubheader>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.FormatListBulleted" Size="Size.Large"
                         Color="MudBlazor.Color.Secondary"></MudIcon>
                <MudText Typo="Typo.h5" Color="MudBlazor.Color.Secondary">
                    Выбор назначения
                </MudText>
            </MudStack>
        </MudListSubheader>
        @foreach(var purpose in Purposes)
        {
            <MudListItem OnClick="(() => SelectPurpose(purpose))" Icon="@(GetListItemIcon(purpose))" 
                IconColor="@(GetListItemIconColor(purpose))">
                @purpose.Name
            </MudListItem>
        }
    </MudList>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public List<Purpose> Purposes { get; set; } = new();
    [Parameter]
    public Purpose SelectedPurpose { get; set; } = null!;

    private bool _isLoading;

    private void SelectPurpose(Purpose purpose)
    {
        SelectedPurpose = purpose;
    }

    private string GetListItemIcon(Purpose purpose)
    {
        if (SelectedPurpose == purpose) return Icons.Material.Outlined.Check;

        return Icons.Material.Outlined.DragHandle;
    }

    private MudBlazor.Color GetListItemIconColor(Purpose purpose)
    {
        if (SelectedPurpose == purpose) return MudBlazor.Color.Success;

        return MudBlazor.Color.Default;
    }

    protected override void OnInitialized()
    {
        SetDefaultData();
    }

    private void SetDefaultData()
    {
        var purpose = Purposes.FirstOrDefault();

        if (purpose is not null)
        {
            SelectedPurpose = purpose;
        }
    }
}
