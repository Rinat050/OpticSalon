@using OpticSalon.Auth.Models
@using OpticSalon.Blazor.Data.Credentials

@inject IEmployeeService EmployeeService
@inject ISnackbar Snackbar

<EditForm Model="_model" OnValidSubmit="@CreateEmployee">
    <DataAnnotationsValidator />
    <MudDialog Class="p-4">
        <DialogContent>
            <MudGrid Class="m-0 p-0" Spacing="1">
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="_model.Name" For="@(() => _model.Name)"
                        Label="Имя" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-Value="_model.Surname" For="@(() => _model.Surname)" 
                        Label="Фамилия" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_model.PhoneNumber" For="@(() => _model.PhoneNumber)"
                                    Variant="Variant.Outlined" InputType="InputType.Telephone" Label="Телефон"
                                    Mask="@(new PatternMask("+0 (000) 000 00-00"))"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_model.Address" For="@(() => _model.Address)"
                                    Variant="Variant.Outlined" Label="Адрес"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="_model.Login" For="@(() => _model.Login)" 
                        Label="Логин" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField InputType="_passwordInput" Adornment="Adornment.End" 
                    AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordVisibilityChange" 
                    T="string" @bind-Value="_model.Password" For="@(() => _model.Password)" 
                    Label="Пароль" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField InputType="_passwordInput" Adornment="Adornment.End" 
                    AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordVisibilityChange" 
                    T="string" @bind-Value="_model.PasswordRepeat" For="@(() => _model.PasswordRepeat)" 
                    Label="Повтор пароля" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudSelect For="(() => _model.Role)" @bind-Value="_model.Role" T="string" 
                        Label="Выберите роль" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"> 
                        @foreach (string role in Role.GetEmployeeRoles())
                        {
                            <MudSelectItem Value="role"></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <div>
                <MudButton OnClick="@Close">Отмена</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Добавить</MudButton>
            </div>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    private EmployeeRegisterCredentials _model = new EmployeeRegisterCredentials();
    private bool _isShow;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override Task OnInitializedAsync()
    {
        _model = new EmployeeRegisterCredentials();
        return base.OnInitializedAsync();
    }

    private async Task CreateEmployee()
    {
        var res = await EmployeeService.CreateEmployeeAsync(_model.Login, _model.Password, 
            _model.Name, _model.Surname, _model.PhoneNumber, _model.Address, _model.Role);

        if (!res.Success)
        {
            Snackbar.Add(res.Description, Severity.Warning);
            return;
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void PasswordVisibilityChange()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void Close() => MudDialog.Close();
}
