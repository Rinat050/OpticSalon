@using OpticSalon.Auth.Managers
@using OpticSalon.Auth.Models
@using OpticSalon.Auth.Services
@using OpticSalon.Blazor.Data.Credentials

@inject IAuthService AuthService
@inject ISnackbar Snackbar

<EditForm Model="_model" OnValidSubmit="@Change">
    <DataAnnotationsValidator />
    <MudDialog Class="p-2">
        <DialogContent>
            <MudGrid Spacing="1">
                <MudItem xs="12">
                    <MudTextField @bind-Value="_model.NewPassword" For="@(() => _model.NewPassword)"
                                    Variant="Variant.Outlined" Label="Новый пароль" InputType="_passwordInput"
                                    Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                    OnAdornmentClick="PasswordVisibilityChange"></MudTextField>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close">Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" 
                    ButtonType="ButtonType.Submit">Сменить</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public string Email { get; set; }
    private EmployeeChangePasswordCredentials _model = new EmployeeChangePasswordCredentials();

    private bool _isShow;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task Change()
    {
        var result = await AuthService.ChangeUserPassword(Email, _model.NewPassword);

        if (result.Success)
        {
            Snackbar.Add(result.Description, Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add(result.Description, Severity.Warning);
        }
    }

    private void Close() => MudDialog.Close();

    private void PasswordVisibilityChange()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
}
