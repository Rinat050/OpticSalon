@using OpticSalon.Blazor.Shared.Dialogs
@using OpticSalon.Domain.Models

@inject NavigationManager NavManager
@inject IOrderService OrderService
@inject IDialogService DialogService

@if (_isLoading)
{
    <MudProgressLinear Color="MudBlazor.Color.Info" Indeterminate="true" Class="m-1" />
    return;
}

@if (Orders.Count() == 0)
{
    <MudAlert Class="m-2" Severity="Severity.Normal">Заказов пока нет...</MudAlert>
    return;
}

<MudTable  T="OrderShort" Items="@Orders">
    <HeaderContent>
        <MudTh>Номер заказа</MudTh>
        <MudTh>Дата создания</MudTh>
        <MudTh>Номер телефона</MudTh>
        <MudTh>Просмотр</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Номер заказа">@context.Id</MudTd>
        <MudTd DataLabel="Дата создания">@context.CreatedDate</MudTd>
        <MudTd DataLabel="Номер телефона">@context.ContactPhoneNumber</MudTd>
        <MudTd DataLabel="Просмотр"><MudIconButton Icon="@Icons.Material.Filled.ArrowRight" OnClick="@(() => OpenOrderInfo(context.Id))"></MudIconButton></MudTd>
    </RowTemplate>
</MudTable>


@code {
    [Parameter]
    public List<OrderShort> Orders { get; set; } = new();
    private bool _isLoading;

    private async Task OpenOrderInfo(int order)
    {
        _isLoading = true;
        var orderRes = await OrderService.GetOrderById(order);
        _isLoading = false;

        if (!orderRes.Success) return;

        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters();
        parameters.Add("Order", orderRes.Data!);

        var dialog = await DialogService.ShowAsync<OrderShowDialog>($"Заказ №{order}" , parameters, options: maxWidth);

        var res = await dialog.Result;
    }
}
