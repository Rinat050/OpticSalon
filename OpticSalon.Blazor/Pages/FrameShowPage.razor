@page "/frameShow/{frameId:int}"
@using MudBlazor.Utilities
@using OpticSalon.Domain.Models
@inject IFrameService FrameService
@inject IImageLoadingService ImageLoadingService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>@($"{_frame?.Brand?.Name} {_frame?.Model}")</PageTitle>

@if (_isLoading)
{
    <MudProgressLinear Color="MudBlazor.Color.Info" Indeterminate="true" Class="m-1" />
    return;
}

<MudContainer Class="d-flex align-center justify-center mud-width-full" style="height:90vh;">

    @if (_frame is null)
    {
        <MudAlert Class="m-2" Severity="Severity.Normal">Оправа не найдена...</MudAlert>
        return;
    }

    <MudCard Class="p-4 w-100" Style="border-radius: 15px;"
             Outlined="false" Elevation="5">
        <MudCardHeader>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Custom.Brands.Awesome" Size="Size.Large"
                         Color="MudBlazor.Color.Secondary"></MudIcon>
                <MudText Typo="Typo.h5" Color="MudBlazor.Color.Secondary">
                    Оправа @($"{_frame.Brand?.Name} {_frame.Model}")
                </MudText>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid Justify="Justify.SpaceAround" Spacing="1">
                <MudItem xs="12" sm="4">
                    <div style="display:flex; justify-content:start;">
                        <MudImage id="frame-image" Elevation="2" Style="min-width:150px; width: 85%;" Alt="" />
                    </div>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudGrid Spacing="1">
                        <MudItem xs="12">
                           <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Бренд:</MudText>
                                <MudText Typo="Typo.h6" Style="font-weight: 400">@(_frame.Brand?.Name)</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Модель:</MudText>
                                <MudText Typo="Typo.h6" Style="font-weight: 400">@(_frame.Model)</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Тип:</MudText>
                                <MudText Typo="Typo.h6" Style="font-weight: 400">@(_frame.Type?.Name)</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Материал:</MudText>
                                <MudText Typo="Typo.h6" Style="font-weight: 400">@(_frame.Material?.Name)</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Пол:</MudText>
                                <MudText Typo="Typo.h6" Style="font-weight: 400">@(_frame.Gender?.Name)</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Размеры:</MudText>
                                <MudText Typo="Typo.h6" Style="font-weight: 400">@GetSizeString(_frame.Sizes)</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Стоимость:</MudText>
                                <MudChip Size="Size.Large" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">@(_frame.Cost) руб.</MudChip>
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudGrid>
                        <MudItem xs="12">
                           <MudContainer Class="p-0">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Доступные цвета:</MudText>
                                @foreach(var color in _frame.Colors)
                                {
                                    <MudFab Size="Size.Small" Class="m-1" style="@($"background-color: {color.Color.Value};")" 
                                        OnClick="@(() => ColorSelect(color.Color))"></MudFab>
                                }
                            </MudContainer>
                        </MudItem>
                        @if (_selectedColor != null)
                        {
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Style="font-weight: 600" Color="MudBlazor.Color.Secondary">Выбранный цвет:</MudText>
                                <MudFab Size="Size.Medium" style="@($"background-color: {_selectedColor.Value};")"></MudFab>
                            </MudItem>
                        }
                        <MudItem xs="12">
                            <MudButton FullWidth Variant="Variant.Filled" OnClick="CreateOrder"
                                Color="MudBlazor.Color.Primary" Disabled="@(_selectedColor == null)" Class="mt-2">Заказать</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>



@code {
    [Parameter]
    public int FrameId { get; set; }
    private Frame _frame = null!;
    private OpticSalon.Domain.Models.Color _selectedColor = null!;

    private bool _isImageLoaded = false;
    private bool _isLoading = false;

    protected async override Task OnInitializedAsync()
    {
        await LoadFrame();
    }

    private string GetSizeString(FrameSizes sizes)
    {

        return $"{sizes.LensWidth}-{sizes.DistanceBetweenLens}-{sizes.TempleLenght}";
    }

    private async Task LoadFrame()
    {
        _isLoading = true;
        var res = await FrameService.GetFrameById(FrameId); 
        _isLoading = false;

        if (res.Success)
        {
            _frame = res.Data!;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (_frame is null || _isImageLoaded) return;

            var loadingRes = await ImageLoadingService.GetFrameImageAsync(_frame.MainImageName);

            if (!loadingRes.Success) return;

            var dotnetImageStream = new DotNetStreamReference(loadingRes.Data!);
            var res = await JS.InvokeAsync<bool>("getById", "frame-image");
            if (res)
            {
                await JS.InvokeVoidAsync("setImage", "frame-image", dotnetImageStream);
            }

            _isImageLoaded = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        { }
    }

    private void ColorSelect(OpticSalon.Domain.Models.Color color)
    {
        _selectedColor = color;
    }

    private async Task CreateOrder()
    {
        var userIdentity = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        if (!userIdentity.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/login");
            return;
        }

        NavManager.NavigateTo($"/createOrder/{_frame.Id}/{_selectedColor.Id}");
    }
}
