@page "/clientProfile"

@using Microsoft.AspNetCore.Identity
@using OpticSalon.Auth.Managers
@using OpticSalon.Auth.Models
@using OpticSalon.Blazor.Data.Credentials
@using OpticSalon.Blazor.Middleware
@using OpticSalon.Blazor.Shared.ClientComponents
@using OpticSalon.Blazor.Shared.Dialogs
@using OpticSalon.Domain.Models

@attribute [Authorize(Roles = Role.Client)]
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider;
@inject OpticSalonSignInManager SignInManager
@inject UserManager<OpticSalonUser> UserManager
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject IClientService ClientService
@inject IOrderService OrderService
@inject IDialogService DialogService
@inject IWarrantyRepairService RepairService

<PageTitle>Профиль</PageTitle>

@if (_isLoading)
{
    <MudProgressLinear Color="MudBlazor.Color.Info" Indeterminate="true" Class="m-1" />
    return;
}

@if (_client == null)
{
    <MudAlert Class="m-2" Severity="Severity.Normal">Не найдено...</MudAlert>
    return;
}

<MudContainer Style="min-height: 90vh;" Class="d-flex justify-center mud-width-full" >
    <MudCard Class="mt-2 mb-2 p-1 w-100" Style="border-radius: 20px;"
             Outlined Elevation="3">
        <MudCardHeader>
            <MudGrid Class="m-2">
                <MudAvatar Style="width: 100px; height:100px;" Class="m-1" Color="MudBlazor.Color.Primary">
                    <MudText Class="m-5" Typo="Typo.h4">@GetAvatarText()</MudText>
                    </MudAvatar>
                <MudStack Class="ms-4" Spacing="0" Justify="Justify.Center">
                    <MudText Color="MudBlazor.Color.Secondary" Typo="Typo.h5" Class="m-0 p-0">@_client?.Name @_client?.Surname</MudText>
                    <MudStack Spacing="0" AlignItems="AlignItems.Center" Row>
                        <MudText Color="MudBlazor.Color.Secondary" Typo="Typo.h6" Class="m-0 p-0">@_user?.Email</MudText>
                        <MudMenu Class="m-0 p-0" Icon="@Icons.Material.Filled.Settings" Color="MudBlazor.Color.Primary">
                            <MudMenuItem OnClick="@ChangeEmailDialogShow">Изменить адрес почты</MudMenuItem>
                            <MudMenuItem OnClick="@ChangePasswordDialogShow">Сменить пароль</MudMenuItem>
                        </MudMenu>
                    </MudStack>
                </MudStack>
            </MudGrid>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs PanelClass="pa-6" MinimumTabWidth="20px" Position="Position.Top">
                <MudTabPanel Icon="@Icons.Material.Filled.AssignmentInd" Text="Личные данные">
                    <ClientProfileDataComponent  Client="_client" OnValidSubmit="@(LoadClientInfo)"></ClientProfileDataComponent>
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.EditNote" Text="Предпочтения">
                    <ProfileClientPreferencesComponent ClientId="_client.Id" ClientPreferences="_clientPreferences" />
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.Assignment" Text="Заказы">
                    <ClientOrdersComponent Orders="_orders"></ClientOrdersComponent>
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.Construction" Text="Гарантийный ремонт">
                    <ClientWarrantyRepairesComponent Repaires="_repaires"></ClientWarrantyRepairesComponent>
                </MudTabPanel>
            </MudTabs>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private OpticSalonUser _user = new();
    private Client _client = null!;
    private ClientPreferences _clientPreferences = null!;
    private List<OrderShortForClient> _orders = new(); 
    private List<WarrantyRepairForClient> _repaires = new(); 
    private bool _isLoading;

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;

        await LoadClientInfo();

        if (_client == null) return;

        var preferencesRes = await ClientService.GetClientPreferences(_client.Id);

        if (preferencesRes.Success)
        {
            _clientPreferences = preferencesRes.Data!;
        }

        var ordersRes = await OrderService.GetOrdersByClient(_client.Id);

        if (ordersRes.Success)
        {
            _orders = ordersRes.Data!;
        }

        var repairesRes = await RepairService.GetRepairesByClient(_client.Id);

        if (repairesRes.Success)
        {
            _repaires = repairesRes.Data!;
        }

        _isLoading = false;
    }

    private async Task LoadClientInfo()
    {
        var userIdentity = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        if (userIdentity is null)
        {
            return;
        }

        var clientId = int.Parse(userIdentity.Claims.First(x => x.Type == UserClaims.ClientId).Value);

        _user = await UserManager.FindByEmailAsync(userIdentity.Identity?.Name);

        var res = await ClientService.GetClientById(clientId);

        if (res.Success)
        {
            _client = res.Data!;
        }

        await InvokeAsync(StateHasChanged);
    }

    private string GetAvatarText()
    {
        return $"{_client?.Name[0]}{_client?.Surname[0]}";
    }

    private async Task ChangeEmailDialogShow()
    {
        var parameters = new DialogParameters();
        parameters.Add("CurrentEmail", _user.Email);

        var dialog = await DialogService.ShowAsync<ChangeEmailDialog>("Изменение адреса почты", parameters);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            var newEmail = (string) res.Data;
            var key = Guid.NewGuid();
            ClientProfileMiddleware.Emails[key] = newEmail;
            NavManager.NavigateTo($"/clientProfile?key={key}", true);
        }
    }

    private async Task ChangePasswordDialogShow()
    {
        var parameters = new DialogParameters();
        parameters.Add("Email", _user.Email);

        var dialog = await DialogService.ShowAsync<ClientChangePasswordDialog>("Изменение пароля", parameters);
    }
}