@page "/catalog"

@using MudBlazor.Utilities
@using OpticSalon.Auth.Models
@using OpticSalon.Blazor.Data.Credentials
@using OpticSalon.Domain.Models
@inject IFrameService FrameService
@inject IFrameTypeService FrameTypeService
@inject IFrameMaterialService FrameMaterialService
@inject IFrameColorService FrameColorService
@inject IBrandService BrandService
@inject IGenderService GenderService
@inject IClientService ClientService
@inject IImageLoadingService ImageLoadingService
@inject IJSRuntime JS
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Каталог</PageTitle>

<MudPaper Class="m-2 me-0 p-2" Elevation="2">
    <MudStack Row>
        <MudStack Row AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Filled.Menu" Size="Size.Large" Color="MudBlazor.Color.Secondary"></MudIcon>
            <MudText Typo="Typo.h4" Color="MudBlazor.Color.Secondary">Каталог</MudText>
        </MudStack>
        <MudSpacer />
        <MudButton Disabled="_isLoading" Style="min-width: 100px;" OnClick="ChangeDrawer"
                   Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Фильтр</MudButton>
    </MudStack>
</MudPaper>

@if (_isLoading)
{
    <MudProgressLinear Color="MudBlazor.Color.Info" Indeterminate="true" Class="m-1" />
    return;
}

@if (_frames.Count == 0)
{
    <MudAlert Class="m-2" Severity="Severity.Normal">Ничего не найдено...</MudAlert>
}
else
{
    <MudGrid Class="m-0 pe-2" Justify="Justify.Center" Spacing="2">
        @foreach (var frame in _frames)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Elevation="3">
              
                        <div class="mud-card-media" style="min-height:150px;">
                            <MudImage id="@(frame.Id)" Style="display: block; margin: auto;object-fit: contain; max-width: 95%; max-height: 30vh" />
                        </div>
                    
                    <MudCardContent>
                        <MudText Typo="Typo.h5" Color="MudBlazor.Color.Secondary">@($"{frame.Brand.Name} {frame.Model}")</MudText>
                        <MudText Typo="Typo.body2">Размеры: @(GetSizeString(frame.Sizes))</MudText>
                        <MudText Typo="Typo.body1">Стоимость: @($"{frame.Cost} руб.")</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton FullWidth Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">Подробнее</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

<MudDrawer @bind-Open="@_isDrawerOpen" Width="30%" Height="100%"
           Anchor="Anchor.Right" Elevation="1" Style="overflow-x: hidden;" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudStack Row AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Outlined.FilterAlt" Size="Size.Large" Color="MudBlazor.Color.Secondary"></MudIcon>
            <MudText Color="MudBlazor.Color.Secondary" Typo="Typo.h6">Фильтр</MudText>
        </MudStack>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="ChangeDrawer"></MudIconButton>
    </MudDrawerHeader>
    <MudDrawerContainer>
        <MudGrid Class="p-3" Spacing="1">
            <MudItem xs="12">
                <MudSelect T="FrameMaterial" @bind-Value="_filter.Material" Clearable Variant="Variant.Outlined"
                           Label="Материал оправы" ToStringFunc="@((x) => x?.Name)">
                    @foreach (var material in _frameMaterials)
                    {
                        <MudSelectItem Value="@(material)" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudSelect T="FrameType" @bind-Value="_filter.Type" Clearable Variant="Variant.Outlined"
                           Label="Тип оправы" ToStringFunc="@((x) => x?.Name)">
                    @foreach (var type in _frameTypes)
                    {
                        <MudSelectItem Value="@(type)" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudSelect T="Brand" @bind-Value="_filter.Brand" Clearable Variant="Variant.Outlined"
                           Label="Бренд" ToStringFunc="@((x) => x?.Name)">
                    @foreach (var brand in _frameBrands)
                    {
                        <MudSelectItem Value="@(brand)" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudSelect T="Gender" @bind-Value="_filter.Gender" Clearable Variant="Variant.Outlined"
                           Label="Пол" ToStringFunc="@((x) => x?.Name)">
                    @foreach (var gender in _genders)
                    {
                        <MudSelectItem Value="@(gender)" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudFab Size="Size.Medium" style="@($"background-color: {_filter.Color?.Value};")"></MudFab>
                    <MudColorPicker ValueChanged="@(ColorChanged)" Clearable Variant="Variant.Outlined" Label="Цвет оправы"
                                    TransformOrigin="Origin.CenterLeft" ColorPickerView="ColorPickerView.Palette"
                                    Palette="_pickerColors"></MudColorPicker>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox @bind-Checked="_filter.IsClientPrefencesSelected" Label="По вашим предпочтениям"
                             Size="Size.Medium" Color="MudBlazor.Color.Primary"></MudCheckBox>
            </MudItem>
            <MudItem xs="12">
                <MudButton FullWidth OnClick="@(async () => await FillFramesData())" Variant="Variant.Filled"
                           Color="MudBlazor.Color.Primary">Применить</MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudButton FullWidth OnClick="@(ClearFilter)" Variant="Variant.Outlined"
                           Color="MudBlazor.Color.Primary">Очистить</MudButton>
            </MudItem>
        </MudGrid>
    </MudDrawerContainer>
</MudDrawer>

@code {
    private List<FrameShort> _frames = new();
    private List<FrameMaterial> _frameMaterials = new();
    private List<FrameType> _frameTypes = new();
    private List<Brand> _frameBrands = new();
    private List<OpticSalon.Domain.Models.Color> _frameColors = new();
    private List<Gender> _genders = new();
    private FramesFilterCredentials _filter = new();
    private ClientPreferences _currentClientPreferences = null!;

    private bool _isDrawerOpen;
    private bool _isLoading;
    private bool _isImagesLoaded;
    private List<MudColor> _pickerColors { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await FillFramesData();
        await FillFilterData();
    }

    private async Task FillFilterData()
    {
        var frameTypeResult = await FrameTypeService.GetAllFrameTypes();

        if (frameTypeResult.Success)
            _frameTypes = frameTypeResult.Data!;

        var frameMaterialResult = await FrameMaterialService.GetAllFrameMaterials();

        if (frameMaterialResult.Success)
            _frameMaterials = frameMaterialResult.Data!;

        var brandResult = await BrandService.GetAllBrands();

        if (brandResult.Success)
            _frameBrands = brandResult.Data!;

        var genderResult = await GenderService.GetAllGenders();

        if (genderResult.Success)
            _genders = genderResult.Data!;

        var frameColorsResult = await FrameColorService.GetAllFrameColors();

        if (frameColorsResult.Success)
        {
            _frameColors = frameColorsResult.Data!;
            _frameColors.ForEach(x => _pickerColors.Add(new MudColor(x.Value)));
        }

        //await LoadClientPreferences();

        await InvokeAsync(StateHasChanged);
    }

    private async Task FillFramesData()
    {
        _isLoading = true;
        _isImagesLoaded = false;
        var res = await FrameService.GetAllFrames(_filter.Type?.Id, _filter.Material?.Id,
                                _filter.Color?.Id, _filter.Gender?.Id, _filter.Brand?.Id,
                                _filter.IsClientPrefencesSelected ? _currentClientPreferences : null);

        if (res.Success)
        {
            _frames = res.Data!;
        }

        _isLoading = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadClientPreferences()
    {
        var userIdentity = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        if (userIdentity is null)
        {
            return;
        }

        var clientId = int.Parse(userIdentity.Claims.First(x => x.Type == UserClaims.ClientId).Value);

        var res = await ClientService.GetClientPreferences(clientId);

        if (res.Success)
        {
            _currentClientPreferences = res.Data!;
        }
    }

    private string GetSizeString(FrameSizes sizes)
    {
        return $"{sizes.LensWidth}-{sizes.DistanceBetweenLens}-{sizes.TempleLenght}";
    }

    private void ChangeDrawer()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

    private void ColorChanged(MudColor mudColor)
    {
        var color = mudColor.Value.Substring(0, mudColor.Value.Length - 2);

        _filter.Color = _frameColors.FirstOrDefault(x => x.Value.ToLower() == color)!;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (_frames.Count == 0 || _isImagesLoaded) return;

            List<Task> tasks = new List<Task>();

            foreach (var frame in _frames)
            {
                var task = new Task(async () =>
                {
                    var loadingRes = await ImageLoadingService.GetFrameImageAsync(frame.MainImageName);

                    if (!loadingRes.Success) return;

                    var dotnetImageStream = new DotNetStreamReference(loadingRes.Data!);
                    try
                    {
                        var res = await JS.InvokeAsync<bool>("getById", $"{frame.Id}");
                        if (res)
                        {
                            await JS.InvokeVoidAsync("setImage", $"{frame.Id}", dotnetImageStream);
                            await InvokeAsync(StateHasChanged);
                        }
                    }
                    catch {}
                });

                tasks.Add(task);
                task.Start();
            }

            Task.WaitAll(tasks.ToArray());
            _isImagesLoaded = true;
        }
        catch (Exception)
        { }
    }

    private void ClearFilter()
    {
        _filter = new FramesFilterCredentials();
    }
}