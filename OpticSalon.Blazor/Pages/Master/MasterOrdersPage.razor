@page "/masterOrders"

@using OpticSalon.Auth.Models
@using OpticSalon.Blazor.Shared.Dialogs
@using OpticSalon.Domain.Enums
@using OpticSalon.Domain.Extensions
@using OpticSalon.Domain.Models
@using OpticSalon.Domain.ResultModels

@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject IEmployeeService EmployeeService
@inject IOrderService OrderService
@inject IWarrantyRepairService RepairService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

@attribute [Authorize(Roles = Role.Master)]

<PageTitle>Заказы</PageTitle>

@if (_isLoading)
{
    <MudProgressLinear Color="MudBlazor.Color.Info" Indeterminate="true" Class="m-1" />
    return;
}

<MudPaper Class="w-100 p-2">
    <MudGrid Class="w-100 ms-2 p-2">
        <MudStack Row AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Medium" Color="MudBlazor.Color.Secondary"></MudIcon>
            <MudText Typo="Typo.h6" Color="MudBlazor.Color.Secondary">Заказы</MudText>
        </MudStack>
        <MudSpacer />
        <MudTextField ValueChanged="@((text) => SearchTextChanged(text))" T="string" Placeholder="Поиск" 
            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
            IconSize="Size.Medium" Class="mt-0 mb-2 me-1"></MudTextField>
    </MudGrid>
</MudPaper>

<MudDropContainer T="MasterOrder" @ref="_dropContainer" ItemDropped="ItemUpdated" Items="@_filterOrders" Style="min-height:78vh;"
    ItemsSelector="@((item,column) => item.OrderStatus.GetDisplayName() == column)" 
    Class="d-flex flex-rotop-row flex-wrap m-1 ">
    <ChildContent>
        <MudItem xs="12" sm="6" md="3">
            <MudDropZone T="MasterOrder" Identifier="@OrderStatus.Created.GetDisplayName()" 
                Class="mud-height-full rounded-lg mud-alert-text-error pa-3 ma-3">
                <MudGrid>
                    <MudIcon Size="Size.Small" Class="ma-2" Icon="@Icons.Material.Filled.Create"></MudIcon>
                    <MudText Typo="Typo.button" Class="ma-2">@OrderStatus.Created.GetDisplayName()</MudText>
                    <MudSpacer/>
                    <MudText Typo="Typo.button" Class="ma-2">@GetOrdersCountByStatus(OrderStatus.Created)</MudText>
                </MudGrid>
            </MudDropZone>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudDropZone T="MasterOrder" Identifier="@OrderStatus.InWork.GetDisplayName()" 
                Class="mud-height-full rounded-lg mud-alert-text-warning pa-3 ma-3">
                <MudGrid>
                    <MudIcon Size="Size.Small" Class="ma-2" Icon="@Icons.Material.Filled.AccessTime"></MudIcon>
                    <MudText Typo="Typo.button" Class="ma-2">@OrderStatus.InWork.GetDisplayName()</MudText>
                    <MudSpacer/>
                    <MudText Typo="Typo.button" Class="ma-2">@GetOrdersCountByStatus(OrderStatus.InWork)</MudText>
                </MudGrid>
            </MudDropZone>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudDropZone T="MasterOrder" Identifier="@OrderStatus.Completed.GetDisplayName()" 
                Class="mud-height-full rounded-lg mud-alert-text-info pa-3 ma-3">
               <MudGrid>
                    <MudIcon Size="Size.Small" Class="ma-2" Icon="@Icons.Material.Filled.CardTravel"></MudIcon>
                    <MudText Typo="Typo.button" Class="ma-2">@OrderStatus.Completed.GetDisplayName()</MudText>
                    <MudSpacer/>
                    <MudText Typo="Typo.button" Class="ma-2">@GetOrdersCountByStatus(OrderStatus.Completed)</MudText>
                </MudGrid>
            </MudDropZone>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudDropZone T="MasterOrder" Identifier="@OrderStatus.Issued.GetDisplayName()"
                Class="mud-height-full rounded-lg mud-alert-text-success pa-3 ma-3">
                <MudGrid>
                    <MudIcon Size="Size.Small" Class="ma-2" Icon="@Icons.Material.Filled.CheckBox"></MudIcon>
                    <MudText Typo="Typo.button" Class="ma-2">@OrderStatus.Issued.GetDisplayName()</MudText>
                    <MudSpacer/>
                    <MudText Typo="Typo.button" Class="ma-2">@GetOrdersCountByStatus(OrderStatus.Issued)</MudText>
                </MudGrid>
            </MudDropZone>
        </MudItem>
    </ChildContent>
    <ItemRenderer>
		<MudPaper onclick="@(() => ShowOrder(context))" Elevation="25" Class="pa-4 rounded-lg my-3">
            <MudText Typo="Typo.body1" Class="mb-1">
                <MudIcon Size="Size.Small" Class="m-0" Icon="@GetListItemIcon(context.OrderType)"/> @GetListItemTitle(context)
            </MudText>
            <MudText Typo="Typo.body1">Дата создания: @context.CreatedDate.ToShortDateString()</MudText>
        </MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {
    private MudDropContainer<MasterOrder> _dropContainer;
    private int _masterId;
    private bool _isLoading;
    private string _search = "";
    private List<MasterOrder> _allOrders = new();
    private List<MasterOrder> _filterOrders = new();

    protected async override Task OnInitializedAsync()
    {
        _isLoading = true;
        await LoadMasterInfo();
        await LoadMasterOrders();
        _isLoading = false;
    }

    private int GetOrdersCountByStatus(OrderStatus status)
    {
        return _filterOrders.Where(x => x.OrderStatus == status).Count();
    }

    private async Task LoadMasterInfo()
    {
        var userIdentity = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        if (userIdentity is null)
        {
            return;
        }

        _masterId = int.Parse(userIdentity.Claims.First(x => x.Type == UserClaims.EmployeeId).Value);
    }

    private async Task LoadMasterOrders()
    {
        if (_masterId == 0)
        {
            return;
        }

        var result = await EmployeeService.GetMasterOrdersAsync(_masterId);

        if (result.Success)
        {
            _allOrders = result.Data!;
            Search();
        }
    }

    private async Task ItemUpdated(MudItemDropInfo<MasterOrder> dropItem)
    {
        var dropStatus = dropItem.DropzoneIdentifier.GetValueFromName<OrderStatus>();

        if (dropItem.Item.OrderStatus == OrderStatus.Issued || dropStatus == OrderStatus.Issued)
        {
            return;
        }

        var parameters = new DialogParameters
        {
            { "Question", "Вы точно желаете поменять статус заказа?" }
        };

        var dialog = await DialogService.ShowAsync<QuestionDialog>("Изменение статуса", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            return;
        }

        if (dropItem.Item.OrderType == OrderType.ManufactureOrder)
        {
            var orderRes = await OrderService.GetOrderById(dropItem.Item.OrderID);

            if (!orderRes.Success)
            {
                Snackbar.Add("Произошла ошибка...", Severity.Warning);
                return;
            }

            var order = orderRes.Data!;
            order.Status = dropStatus;

            var updateResult = await OrderService.UpdateOrder(order);

            if (!updateResult.Success)
            {
                Snackbar.Add("Произошла ошибка...", Severity.Warning);
                return;
            }
        }
        else
        {
            var repairRes = await RepairService.GetRepairById(dropItem.Item.OrderID);

            if (!repairRes.Success)
            {
                Snackbar.Add("Произошла ошибка...", Severity.Warning);
                return;
            }

            var repair = repairRes.Data!;
            repair.Status = dropStatus;

            var updateResult = await RepairService.UpdateRepair(repair);

            if (!updateResult.Success)
            {
                Snackbar.Add("Произошла ошибка...", Severity.Warning);
                return;
            }
        }

        dropItem.Item.OrderStatus = dropStatus;
    }

    private void ShowOrder(MasterOrder order)
    {
        if (order.OrderType == OrderType.ManufactureOrder)
        {
            NavManager.NavigateTo($"/orderShow/{order.OrderID}");
        }
        else
        {
            NavManager.NavigateTo($"/warrantyRepair/{order.OrderID}");
        }
    }

    private void SearchTextChanged(string text)
    {
        _search = text.ToLower();

        Search();
    }

    private void Search()
    {
        if (string.IsNullOrWhiteSpace(_search))
        {
            _filterOrders = _allOrders;
            return;
        }

        _filterOrders = _allOrders
                .Where(x => x.OrderID.ToString().ToLower().Contains(_search)
                || x.OrderType.GetDisplayName()!.ToLower().Contains(_search)).ToList();
    }

    private string GetListItemIcon(OrderType type)
    {
        if (type == OrderType.ManufactureOrder) return Icons.Material.Filled.Assignment;

        return Icons.Material.Filled.Construction;
    }

    private string GetListItemTitle(MasterOrder order)
    {
        if (order.OrderType == OrderType.ManufactureOrder) return $"Заказ №{order.OrderID}";

        return $"Гарантийный ремонт №{order.OrderID}";
    }
}
